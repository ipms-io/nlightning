@page "/"

<PageTitle>Home</PageTitle>

<div class="bd-intro pt-2 ps-lg-2">
    <div class="d-md-flex align-items-center">
        <h1 class="bd-title mb-0">Welcome to the Blazor Bolt11 Decoder Demo</h1>
    </div>
    <p class="bd-lead">
        This app is written in C# and Blazor, and it decodes BOLT11 invoices in your browser without relying on a server to do so.
    </p>
    <p>
        The source code for this page can be found on <a href="https://github.com/ipms-io/NLightning/tree/main/samples/Bolt11.Decoder.Blazor">Github</a>.
    </p>
</div>

<div class="bd-content ps-lg-2">
    <h2>
        Here you can learn a little more about the technologies used for this project.
    </h2>
    <br/>
    <h3>
        dotNet
    </h3>
    <p>
        .NET is a free, cross-platform, open-source developer platform created by Microsoft. It is used for building many different types of applications, with C#, or F# being the main programming languages. The platform provides a comprehensive and consistent programming model and a common set of APIs. .NET can be used to build applications for Windows, Linux, macOS, iOS, Android, tvOS, watchOS, and WebAssembly.
    </p>
    <br/>
    <h3>
        Blazor
    </h3>
    <p>
        Blazor is a framework for building interactive client-side web UI with .NET. Using Blazor, developers can write rich web applications using C#, HTML, and CSS, with all client-side logic written in C#. It allows the use of existing .NET libraries and tools, providing a robust environment for development. Blazor can run client logic on the server using SignalR or on the client using WebAssembly, enabling high performance and offline capabilities.
    </p>
    <br/>
    <h3>
        WASM
    </h3>
    <p>
        WebAssembly (WASM) is an open standard that defines a portable binary-code format for executable programs, and a corresponding textual assembly language, as well as interfaces for facilitating interactions between such programs and their host environment. The main goal is to enable high performance applications on web pages, but it is designed to be executed and integrated in other environments as well, including standalone ones. WASM is designed to work alongside JavaScript, allowing both to work together.
    </p>
</div>