@page "/"
@using NLightning.Infrastructure.Crypto.Providers.JS
@using NLightning.Tests.Utils.Vectors

<PageTitle>Test</PageTitle>

<h1>Blazor Test App</h1>

<p>Welcome to our test app.</p>
<br/>
<button data-testid="encodeAeadChacha20Poly1305Ietf" @onclick="EncodeAeadChacha20Poly1305Ietf">Encode AeadChacha20Poly1305Ietf</button>
<br/>
<button data-testid="decodeAeadChacha20Poly1305Ietf" @onclick="DecodeAeadChacha20Poly1305Ietf">Decode AeadChacha20Poly1305Ietf</button>
<br/>
<button data-testid="encodeAeadXChacha20Poly1305Ietf" @onclick="EncodeAeadXChacha20Poly1305Ietf">Encode AeadXChacha20Poly1305Ietf</button>
<br/>
<button data-testid="decodeAeadXChacha20Poly1305Ietf" @onclick="DecodeAeadXChacha20Poly1305Ietf">Decode AeadXChacha20Poly1305Ietf</button>
<br/>
@if (_hasAeadChacha20Poly1305IetfResult)
{
    <p data-testid="aeadChacha20Poly1305IetfResult">@_aeadChacha20Poly1305IetfResult</p>
}
@if (_hasAeadXChacha20Poly1305IetfResult)
{
    <p data-testid="aeadXChacha20Poly1305IetfResult">@_aeadXChacha20Poly1305IetfResult</p>
}

@code {
    bool _hasAeadChacha20Poly1305IetfResult;
    bool _hasAeadXChacha20Poly1305IetfResult;
    string? _aeadChacha20Poly1305IetfResult;
    string? _aeadXChacha20Poly1305IetfResult;

    void EncodeAeadChacha20Poly1305Ietf()
    {
        // Arrange
        var cryptoProvider = new SodiumJsCryptoProvider();
        Span<byte> cipher = new byte[AeadChacha20Poly1305IetfVector.Message.Length + 16];

        // Act
        cryptoProvider.AeadChaCha20Poly1305IetfEncrypt(AeadChacha20Poly1305IetfVector.Key,
                                                       AeadChacha20Poly1305IetfVector.PublicNonce, null,
                                                       AeadChacha20Poly1305IetfVector.AuthenticationData,
                                                       AeadChacha20Poly1305IetfVector.Message, cipher, out var clenP);

        // Expose Results 
        _aeadChacha20Poly1305IetfResult = $"{{\"Result\":{{\"ClenP\":{clenP},\"Cipher\":\"{Convert.ToHexString(cipher)}\"}}}}";
        _hasAeadChacha20Poly1305IetfResult = true;
    }

    void DecodeAeadChacha20Poly1305Ietf()
    {
        throw new NotImplementedException();
    }

    void EncodeAeadXChacha20Poly1305Ietf()
    {
        // Arrange
        var cryptoProvider = new SodiumJsCryptoProvider();
        Span<byte> cipher = new byte[AeadXChacha20Poly1305IetfVector.Message.Length + 16];

        // Act
        cryptoProvider.AeadXChaCha20Poly1305IetfEncrypt(AeadXChacha20Poly1305IetfVector.Key,
                                                        AeadXChacha20Poly1305IetfVector.PublicNonce,
                                                        AeadXChacha20Poly1305IetfVector.AuthenticationData,
                                                        AeadXChacha20Poly1305IetfVector.Message, cipher, out var clenP);

        // Expose Results 
        _aeadXChacha20Poly1305IetfResult = $"{{\"Result\":{{\"ClenP\":{clenP},\"Cipher\":\"{Convert.ToHexString(cipher)}\"}}}}";
        _hasAeadXChacha20Poly1305IetfResult = true;
    }

    void DecodeAeadXChacha20Poly1305Ietf()
    {
        throw new NotImplementedException();
    }
}