using NBitcoin;

namespace NLightning.Bolts.Tests.BOLT2.Messages;

using Common.Enums;
using Common.Exceptions;
using Common.Messages;
using Common.Messages.Payloads;
using Common.TLVs;
using Common.Types;
using Utils;

public class UpdateAddHtlcMessageTests
{
    #region Deserialize
    [Fact]
    public async Task Given_ValidStream_When_DeserializeAsync_Then_ReturnsUpdateAddHtlcMessage()
    {
        // Arrange
        var expectedChannelId = ChannelId.Zero;
        const ulong EXPECTED_ID = 0UL;
        var expectedAmountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var expectedPaymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint EXPECTED_CLTV_EXPIRY = 3u;
        var stream = new MemoryStream("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001567CBDADB00B825448B2E414487D73A97F657F0634166D3AB3F3A2CC1042EDA500000003".ToByteArray());

        // Act
        var message = await UpdateAddHtlcMessage.DeserializeAsync(stream);

        // Assert
        Assert.Equal(expectedChannelId, message.Payload.ChannelId);
        Assert.Equal(EXPECTED_ID, message.Payload.Id);
        Assert.Equal(expectedAmountMsat, message.Payload.Amount);
        Assert.Equal(expectedPaymentHash, message.Payload.PaymentHash);
        Assert.Equal(EXPECTED_CLTV_EXPIRY, message.Payload.CltvExpiry);
        Assert.Null(message.Extension);
    }

    [Fact]
    public async Task Given_ValidStream_When_DeserializeAsync_Then_ReturnsUpdateAddHtlcMessageWithRoutingPacket()
    {
        // Arrange
        var expectedChannelId = ChannelId.Zero;
        const ulong EXPECTED_ID = 0UL;
        var expectedAmountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var expectedPaymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint EXPECTED_CLTV_EXPIRY = 3u;
        var expectedOnionRoutingPacket = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda518885f08987b365412fdffa239917499b5b45557c6312852b36c62b5bd0c3f6837bcd5f6757b564cc44090ee1c156621ef432e9f0ffacb77dfca219d514312ae02f6c0d865cea05074183c6c6300c8ffbb3fdacc9e01847d32567e9d189ab01aa4a66f4f12ba54202f10d11604b00cda31c259d24a14b8816940d3b6ce20b955687ee834f07e35cbffadbe725588f1d64985ff329a1860afb0cbe1c81b4028209a6fccf0c44f18a0d1e7d2e10b800aee3ddfcae4395cb363a840f8958ec860d51903a89d60ffaba46256d68a15920544ca989469e18e6dc252c2edbd153292af3dbe51c8d9064360588dc7316a8e682d56ea99f5ef6da6e8f566e715a3320396b556cc0bfad6ad22f25635a893cd493734c7667834005ff5ad2a437a0eada662823382cec1164661e691845a81ea063dc6dbd84c30bcfb8de272a14bc46601c1c0d4216d96685f6272d60313b3034aec74b11ad0639b885f22de2a476a989c7198f1aa556f50abd3d8d60b9da0ae2a31bd7e744723b33a44a68b19b60bad95c90d79db77fadf8852afff7cb44882ba7b06741fd68bdd25f27c120c9b42ffa544cca0a4350cb1fe43030a8bbd06b584114c4e8101386c0603e90f657c8e105da42bf8bb3c9dbae55e008ff25ca141f630f6b230e863c61a4d9affacfecd2580abd42087d26de8a6371af07f6f532d482a7026e4cc1f2295be284e5018655fcb7ae272b33a0f209f80b1a77eb8102aeb98eb85b77047e8a6ddfcd48b31175f4177cca1d3b0942fea2fc6d8f71492f3a260abb7eebedac4cef600b6d65a156df8e194b86461b752cd6f289feed9ab53d8a977bec9dab73774c7bb7c60e02f728a61598df8fedbc851cdd4e6b97641fb3d11a15320957d9e2fc2732c210d463b880fb1a5b5ca18e6ad456b8acd1d9dfe43824c0b12a925efea55bf74380ca6a4dfbb267a5c61299eef9663ffaf40d2a8c078be6d95bf5cd3d8fddf3ac76a76b55ac6d3ef964ee5b7e1434cadd1a66c33b4b75babe907fcc3fe97ead7d6d7faa05b9184c2e54aa8f8366e6fdc6d9d0fca8dafb5adf3f31505b15c89a12063cd7492f392ca575404ff9c93c7935a9f1c5d28b88e63d0df7db36dfb2c498f8ff665b2bc01718eebfa47adbf34aac7c34834824ab3b101aca7a09e3210c4aca6ab0b7d214cf7e69d992ec0231ef1d2afc19b09f035baca8f04fcdc6adaab392732ac1c223ef3af0d6020e3d41a1c7766590ee88e04b8161c5ae21f7e94f7dc3a2085d4fb54d2ecd1772db2f6cac66354d7e522e99574b0e952e3f4ee06b4d5047f2d2149ab03dde085daca6771044a15c6d956096d9c2dd5cda17e230195c676cce9ece97a83957f2520d844350d1c72766e80b421e6d9fbef30f8f8223ac5b1e7b9e49f0083b90fd42af4b0cd60633de954a04101bba9a87f3b7bff60b3d5806828fde024437b7b7c97db35b93f8cfc98b19a15e92a65ec7c918c913c1e02593b080d8700ec65948d954b49d1d9099e9bcf50ea201e8d09b1f92245bcabcc55226ec8599e4530fe8d3c645c88cdd1dd483086341c89d36b94db6964a6acf029dd200565eb7eed8570168c7e3e8fe2e49dd1e706d38e3ecd3693d41b279a1ed6e090be23bf359db63a5b2acef5432b482af1f5ad2c38e288a0ae5fa49093789509e7aa167c53c6e6faa60e009edf15b8a0e5263822cbcc32177ee28d6320ead4c60d30b67e75fae676fc9f38a784db7612104a20aaba108457dbb09e403f120b1019d23b7c3b095f50007c388f74eec12e7cb45cc45769939a88026f2f3bdd29f47dd480b54aa6606b42fdc191d69d107e0c94f39f5f760534b448b006d7e07faf92d70d2cdbfafe799a76e4f19a73f00bb0d06b50cf09955659".ToByteArray();
        var stream = new MemoryStreamoByteArray());

        // Act
        var message = await UpdateAddHtlcMessage.DeserializeAsync(stream);

        // Assert
        Assert.Equal(expectedChannelId, message.Payload.ChannelId);
        Assert.Equal(EXPECTED_ID, message.Payload.Id);
        Assert.Equal(expectedAmountMsat, message.Payload.Amount);
        Assert.Equal(expectedPaymentHash, message.Payload.PaymentHash);
        Assert.Equal(EXPECTED_CLTV_EXPIRY, message.Payload.CltvExpiry);
        Assert.Equal(expectedOnionRoutingPacket, message.Payload.OnionRoutingPacket!.Value.ToArray());
        Assert.Null(message.Extension);
    }

    [Fact]
    public async Task Given_ValidStream_When_DeserializeAsync_Then_ReturnsTxAckRbfMessageWithExtensions()
    {
        // Arrange
        var expectedChannelId = ChannelId.Zero;
        const ulong EXPECTED_ID = 0UL;
        var expectedAmountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var expectedPaymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint EXPECTED_CLTV_EXPIRY = 3u;
        var expectedPathKey = new PubKey("02c93ca7dca44d2e45e3cc5419d92750f7fb3a0f180852b73a621f4051c0193a75".ToByteArray());
        var stream = new MemoryStream("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001567CBDADB00B825448B2E414487D73A97F657F0634166D3AB3F3A2CC1042EDA500000003002102C93CA7DCA44D2E45E3CC5419D92750F7FB3A0F180852B73A621F4051C0193A75".ToByteArray());

        // Act
        var message = await UpdateAddHtlcMessage.DeserializeAsync(stream);

        // Assert
        Assert.Equal(expectedChannelId, message.Payload.ChannelId);
        Assert.Equal(EXPECTED_ID, message.Payload.Id);
        Assert.Equal(expectedAmountMsat, message.Payload.Amount);
        Assert.Equal(expectedPaymentHash, message.Payload.PaymentHash);
        Assert.Equal(EXPECTED_CLTV_EXPIRY, message.Payload.CltvExpiry);
        Assert.NotNull(message.Extension);
        Assert.NotNull(message.BlindedPathTlv);
        Assert.Equal(expectedPathKey, message.BlindedPathTlv.PathKey);
    }

    [Fact]
    public async Task Given_InvalidStreamContent_When_DeserializeAsync_Then_ThrowsMessageSerializationException()
    {
        // Arrange
        var invalidStream = new MemoryStream("0080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001567CBDADB00B825448B2E414487D73A97F657F0634166D3AB3F3A2CC1042EDA5000000030021".ToByteArray());

        // Act & Assert
        await Assert.ThrowsAsync<MessageSerializationException>(() => UpdateAddHtlcMessage.DeserializeAsync(invalidStream));
    }
    #endregion

    #region Serialize
    [Fact]
    public async Task Given_ValidPayload_When_SerializeAsync_Then_WritesCorrectDataToStream()
    {
        // Arrange
        var channelId = ChannelId.Zero;
        const ulong ID = 0UL;
        var amountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var paymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint CLTV_EXPIRY = 3u;
        var message = new UpdateAddHtlcMessage(new UpdateAddHtlcPayload(channelId, ID, amountMsat, paymentHash, CLTV_EXPIRY));
        var stream = new MemoryStream();
        var expectedBytes = "0080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001567CBDADB00B825448B2E414487D73A97F657F0634166D3AB3F3A2CC1042EDA500000003".ToByteArray();

        // Act
        await message.SerializeAsync(stream);
        stream.Position = 0;
        var result = new byte[stream.Length];
        _ = await stream.ReadAsync(result);

        // Assert
        Assert.Equal(expectedBytes, result);
    }

    [Fact]
    public async Task Given_ValidPayloadWithOnionPacket_When_SerializeAsync_Then_WritesCorrectDataToStream()
    {
        // Arrange
        var channelId = ChannelId.Zero;
        const ulong ID = 0UL;
        var amountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var paymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint CLTV_EXPIRY = 3u;
        var onionRoutingPacket = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda518885f08987b365412fdffa239917499b5b45557c6312852b36c62b5bd0c3f6837bcd5f6757b564cc44090ee1c156621ef432e9f0ffacb77dfca219d514312ae02f6c0d865cea05074183c6c6300c8ffbb3fdacc9e01847d32567e9d189ab01aa4a66f4f12ba54202f10d11604b00cda31c259d24a14b8816940d3b6ce20b955687ee834f07e35cbffadbe725588f1d64985ff329a1860afb0cbe1c81b4028209a6fccf0c44f18a0d1e7d2e10b800aee3ddfcae4395cb363a840f8958ec860d51903a89d60ffaba46256d68a15920544ca989469e18e6dc252c2edbd153292af3dbe51c8d9064360588dc7316a8e682d56ea99f5ef6da6e8f566e715a3320396b556cc0bfad6ad22f25635a893cd493734c7667834005ff5ad2a437a0eada662823382cec1164661e691845a81ea063dc6dbd84c30bcfb8de272a14bc46601c1c0d4216d96685f6272d60313b3034aec74b11ad0639b885f22de2a476a989c7198f1aa556f50abd3d8d60b9da0ae2a31bd7e744723b33a44a68b19b60bad95c90d79db77fadf8852afff7cb44882ba7b06741fd68bdd25f27c120c9b42ffa544cca0a4350cb1fe43030a8bbd06b584114c4e8101386c0603e90f657c8e105da42bf8bb3c9dbae55e008ff25ca141f630f6b230e863c61a4d9affacfecd2580abd42087d26de8a6371af07f6f532d482a7026e4cc1f2295be284e5018655fcb7ae272b33a0f209f80b1a77eb8102aeb98eb85b77047e8a6ddfcd48b31175f4177cca1d3b0942fea2fc6d8f71492f3a260abb7eebedac4cef600b6d65a156df8e194b86461b752cd6f289feed9ab53d8a977bec9dab73774c7bb7c60e02f728a61598df8fedbc851cdd4e6b97641fb3d11a15320957d9e2fc2732c210d463b880fb1a5b5ca18e6ad456b8acd1d9dfe43824c0b12a925efea55bf74380ca6a4dfbb267a5c61299eef9663ffaf40d2a8c078be6d95bf5cd3d8fddf3ac76a76b55ac6d3ef964ee5b7e1434cadd1a66c33b4b75babe907fcc3fe97ead7d6d7faa05b9184c2e54aa8f8366e6fdc6d9d0fca8dafb5adf3f31505b15c89a12063cd7492f392ca575404ff9c93c7935a9f1c5d28b88e63d0df7db36dfb2c498f8ff665b2bc01718eebfa47adbf34aac7c34834824ab3b101aca7a09e3210c4aca6ab0b7d214cf7e69d992ec0231ef1d2afc19b09f035baca8f04fcdc6adaab392732ac1c223ef3af0d6020e3d41a1c7766590ee88e04b8161c5ae21f7e94f7dc3a2085d4fb54d2ecd1772db2f6cac66354d7e522e99574b0e952e3f4ee06b4d5047f2d2149ab03dde085daca6771044a15c6d956096d9c2dd5cda17e230195c676cce9ece97a83957f2520d844350d1c72766e80b421e6d9fbef30f8f8223ac5b1e7b9e49f0083b90fd42af4b0cd60633de954a04101bba9a87f3b7bff60b3d5806828fde024437b7b7c97db35b93f8cfc98b19a15e92a65ec7c918c913c1e02593b080d8700ec65948d954b49d1d9099e9bcf50ea201e8d09b1f92245bcabcc55226ec8599e4530fe8d3c645c88cdd1dd483086341c89d36b94db6964a6acf029dd200565eb7eed8570168c7e3e8fe2e49dd1e706d38e3ecd3693d41b279a1ed6e090be23bf359db63a5b2acef5432b482af1f5ad2c38e288a0ae5fa49093789509e7aa167c53c6e6faa60e009edf15b8a0e5263822cbcc32177ee28d6320ead4c60d30b67e75fae676fc9f38a784db7612104a20aaba108457dbb09e403f120b1019d23b7c3b095f50007c388f74eec12e7cb45cc45769939a88026f2f3bdd29f47dd480b54aa6606b42fdc191d69d107e0c94f39f5f760534b448b006d7e07faf92d70d2cdbfafe799a76e4f19a73f00bb0d06b50cf09955659".ToByteArray();
        var message = new UpdateAddHtlcMessage(new UpdateAddHtlcPayload(channelId, ID, amountMsat, paymentHash, CLTV_EXPIRY, onionRoutingPacket));
        var stream = new MemoryStream();
        var expectedBytesoByteArray();

        // Act
        await message.SerializeAsync(stream);
        stream.Position = 0;
        var result = new byte[stream.Length];
        _ = await stream.ReadAsync(result);

        // Assert
        Assert.Equal(expectedBytes, result);
    }

    [Fact]
    public async Task Given_ValidPayloadAndExtensions_When_SerializeAsync_Then_WritesCorrectDataToStream()
    {
        // Arrange
        var channelId = ChannelId.Zero;
        const ulong ID = 0UL;
        var amountMsat = LightningMoney.FromUnit(1, LightningMoneyUnit.MILLI_SATOSHI);
        var paymentHash = "567cbdadb00b825448b2e414487d73a97f657f0634166d3ab3f3a2cc1042eda5".ToByteArray();
        const uint CLTV_EXPIRY = 3u;
        var pathKey = new PubKey("02c93ca7dca44d2e45e3cc5419d92750f7fb3a0f180852b73a621f4051c0193a75".ToByteArray());
        var blindedPathTlv = new BlindedPathTlv(pathKey);
        var message = new UpdateAddHtlcMessage(new UpdateAddHtlcPayload(channelId, ID, amountMsat, paymentHash, CLTV_EXPIRY), blindedPathTlv);
        var stream = new MemoryStream();
        var expectedBytes = "0080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001567CBDADB00B825448B2E414487D73A97F657F0634166D3AB3F3A2CC1042EDA500000003002102C93CA7DCA44D2E45E3CC5419D92750F7FB3A0F180852B73A621F4051C0193A75".ToByteArray();

        // Act
        await message.SerializeAsync(stream);
        stream.Position = 0;
        var result = new byte[stream.Length];
        _ = await stream.ReadAsync(result);

        // Assert
        Assert.Equal(expectedBytes, result);
    }
    #endregion
}