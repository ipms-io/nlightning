// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLightning.Infrastructure.Persistence.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NLightning.Infrastructure.Persistence.Postgres.Migrations
{
    [DbContext(typeof(NLightningDbContext))]
    [Migration("20250606153442_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelConfigEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("bytea")
                        .HasColumnName("channel_id");

                    b.Property<long?>("ChannelReserveAmountSats")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_reserve_amount_sats");

                    b.Property<long>("FeeRatePerKwSatoshis")
                        .HasColumnType("bigint")
                        .HasColumnName("fee_rate_per_kw_satoshis");

                    b.Property<decimal>("HtlcMinimumMsat")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("htlc_minimum_msat");

                    b.Property<long>("LocalDustLimitAmountSats")
                        .HasColumnType("bigint")
                        .HasColumnName("local_dust_limit_amount_sats");

                    b.Property<byte[]>("LocalUpfrontShutdownScript")
                        .HasColumnType("bytea")
                        .HasColumnName("local_upfront_shutdown_script");

                    b.Property<int>("MaxAcceptedHtlcs")
                        .HasColumnType("integer")
                        .HasColumnName("max_accepted_htlcs");

                    b.Property<decimal>("MaxHtlcAmountInFlight")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("max_htlc_amount_in_flight");

                    b.Property<long>("MinimumDepth")
                        .HasColumnType("bigint")
                        .HasColumnName("minimum_depth");

                    b.Property<bool>("OptionAnchorOutputs")
                        .HasColumnType("boolean")
                        .HasColumnName("option_anchor_outputs");

                    b.Property<long>("RemoteDustLimitAmountSats")
                        .HasColumnType("bigint")
                        .HasColumnName("remote_dust_limit_amount_sats");

                    b.Property<byte[]>("RemoteUpfrontShutdownScript")
                        .HasColumnType("bytea")
                        .HasColumnName("remote_upfront_shutdown_script");

                    b.Property<int>("ToSelfDelay")
                        .HasColumnType("integer")
                        .HasColumnName("to_self_delay");

                    b.Property<byte>("UseScidAlias")
                        .HasColumnType("smallint")
                        .HasColumnName("use_scid_alias");

                    b.HasKey("ChannelId")
                        .HasName("pk_channel_configs");

                    b.ToTable("channel_configs", (string)null);
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("bytea")
                        .HasColumnName("channel_id");

                    b.Property<long>("FundingAmountSatoshis")
                        .HasColumnType("bigint")
                        .HasColumnName("funding_amount_satoshis");

                    b.Property<long>("FundingCreatedAtBlockHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("funding_created_at_block_height");

                    b.Property<long>("FundingOutputIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("funding_output_index");

                    b.Property<byte[]>("FundingTxId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("funding_tx_id");

                    b.Property<bool>("IsInitiator")
                        .HasColumnType("boolean")
                        .HasColumnName("is_initiator");

                    b.Property<byte[]>("LastReceivedSignature")
                        .HasColumnType("bytea")
                        .HasColumnName("last_received_signature");

                    b.Property<byte[]>("LastSentSignature")
                        .HasColumnType("bytea")
                        .HasColumnName("last_sent_signature");

                    b.Property<decimal>("LocalBalanceSatoshis")
                        .HasColumnType("numeric")
                        .HasColumnName("local_balance_satoshis");

                    b.Property<decimal>("LocalNextHtlcId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("local_next_htlc_id");

                    b.Property<decimal>("LocalRevocationNumber")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("local_revocation_number");

                    b.Property<decimal>("RemoteBalanceSatoshis")
                        .HasColumnType("numeric")
                        .HasColumnName("remote_balance_satoshis");

                    b.Property<decimal>("RemoteNextHtlcId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("remote_next_htlc_id");

                    b.Property<byte[]>("RemoteNodeId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("remote_node_id");

                    b.Property<decimal>("RemoteRevocationNumber")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("remote_revocation_number");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<byte>("Version")
                        .HasColumnType("smallint")
                        .HasColumnName("version");

                    b.HasKey("ChannelId")
                        .HasName("pk_channels");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelKeySetEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("bytea")
                        .HasColumnName("channel_id");

                    b.Property<bool>("IsLocal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_local");

                    b.Property<decimal>("CurrentPerCommitmentIndex")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("current_per_commitment_index");

                    b.Property<byte[]>("CurrentPerCommitmentPoint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("current_per_commitment_point");

                    b.Property<byte[]>("DelayedPaymentBasepoint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("delayed_payment_basepoint");

                    b.Property<byte[]>("FundingPubKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("funding_pub_key");

                    b.Property<byte[]>("HtlcBasepoint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("htlc_basepoint");

                    b.Property<long>("KeyIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("key_index");

                    b.Property<byte[]>("LastRevealedPerCommitmentSecret")
                        .HasColumnType("bytea")
                        .HasColumnName("last_revealed_per_commitment_secret");

                    b.Property<byte[]>("PaymentBasepoint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payment_basepoint");

                    b.Property<byte[]>("RevocationBasepoint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("revocation_basepoint");

                    b.HasKey("ChannelId", "IsLocal")
                        .HasName("pk_channel_key_sets");

                    b.ToTable("channel_key_sets", (string)null);
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.HtlcEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("bytea")
                        .HasColumnName("channel_id");

                    b.Property<decimal>("HtlcId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("htlc_id");

                    b.Property<byte>("Direction")
                        .HasColumnType("smallint")
                        .HasColumnName("direction");

                    b.Property<byte[]>("AddMessageBytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("add_message_bytes");

                    b.Property<decimal>("AmountMsat")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("amount_msat");

                    b.Property<long>("CltvExpiry")
                        .HasColumnType("bigint")
                        .HasColumnName("cltv_expiry");

                    b.Property<decimal>("ObscuredCommitmentNumber")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("obscured_commitment_number");

                    b.Property<byte[]>("PaymentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("payment_hash");

                    b.Property<byte[]>("PaymentPreimage")
                        .HasColumnType("bytea")
                        .HasColumnName("payment_preimage");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("bytea")
                        .HasColumnName("signature");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.HasKey("ChannelId", "HtlcId", "Direction")
                        .HasName("pk_htlcs");

                    b.ToTable("htlcs", (string)null);
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelConfigEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.ChannelEntity", null)
                        .WithOne("Config")
                        .HasForeignKey("NLightning.Infrastructure.Persistence.Entities.ChannelConfigEntity", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_configs_channels_channel_id");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelKeySetEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.ChannelEntity", null)
                        .WithMany("KeySets")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_key_sets_channels_channel_id");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.HtlcEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.ChannelEntity", null)
                        .WithMany("Htlcs")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_htlcs_channels_channel_id");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.ChannelEntity", b =>
                {
                    b.Navigation("Config");

                    b.Navigation("Htlcs");

                    b.Navigation("KeySets");
                });
#pragma warning restore 612, 618
        }
    }
}