// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLightning.Infrastructure.Persistence.Contexts;

#nullable disable

namespace NLightning.Infrastructure.Persistence.SqlServer.Migrations
{
    [DbContext(typeof(NLightningDbContext))]
    partial class NLightningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Bitcoin.BlockchainStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("LastProcessedBlockHash")
                        .IsRequired()
                        .HasColumnType("varbinary(32)");

                    b.Property<long>("LastProcessedHeight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BlockchainStates");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Bitcoin.WatchedTransactionEntity", b =>
                {
                    b.Property<byte[]>("TransactionId")
                        .HasColumnType("varbinary(32)");

                    b.Property<byte[]>("ChannelId")
                        .IsRequired()
                        .HasColumnType("varbinary(32)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FirstSeenAtHeight")
                        .HasColumnType("bigint");

                    b.Property<long>("RequiredDepth")
                        .HasColumnType("bigint");

                    b.Property<int?>("TransactionIndex")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("ChannelId");

                    b.ToTable("WatchedTransactions");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelConfigEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("varbinary(32)");

                    b.Property<long?>("ChannelReserveAmountSats")
                        .HasColumnType("bigint");

                    b.Property<long>("FeeRatePerKwSatoshis")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HtlcMinimumMsat")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("LocalDustLimitAmountSats")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("LocalUpfrontShutdownScript")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MaxAcceptedHtlcs")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxHtlcAmountInFlight")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("MinimumDepth")
                        .HasColumnType("bigint");

                    b.Property<bool>("OptionAnchorOutputs")
                        .HasColumnType("bit");

                    b.Property<long>("RemoteDustLimitAmountSats")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RemoteUpfrontShutdownScript")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ToSelfDelay")
                        .HasColumnType("int");

                    b.Property<byte>("UseScidAlias")
                        .HasColumnType("tinyint");

                    b.HasKey("ChannelId");

                    b.ToTable("ChannelConfigs");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("varbinary(32)");

                    b.Property<long>("FundingAmountSatoshis")
                        .HasColumnType("bigint");

                    b.Property<long>("FundingCreatedAtBlockHeight")
                        .HasColumnType("bigint");

                    b.Property<int>("FundingOutputIndex")
                        .HasColumnType("int");

                    b.Property<byte[]>("FundingTxId")
                        .IsRequired()
                        .HasColumnType("varbinary(32)");

                    b.Property<bool>("IsInitiator")
                        .HasColumnType("bit");

                    b.Property<byte[]>("LastReceivedSignature")
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("LastSentSignature")
                        .HasColumnType("varbinary(64)");

                    b.Property<long>("LocalBalanceSatoshis")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LocalNextHtlcId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("LocalRevocationNumber")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("PeerEntityNodeId")
                        .HasColumnType("varbinary(33)");

                    b.Property<long>("RemoteBalanceSatoshis")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RemoteNextHtlcId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("RemoteNodeId")
                        .IsRequired()
                        .HasColumnType("varbinary(32)");

                    b.Property<decimal>("RemoteRevocationNumber")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Version")
                        .HasColumnType("tinyint");

                    b.HasKey("ChannelId");

                    b.HasIndex("PeerEntityNodeId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelKeySetEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("varbinary(32)");

                    b.Property<bool>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<decimal>("CurrentPerCommitmentIndex")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("CurrentPerCommitmentPoint")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.Property<byte[]>("DelayedPaymentBasepoint")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.Property<byte[]>("FundingPubKey")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.Property<byte[]>("HtlcBasepoint")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.Property<long>("KeyIndex")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("LastRevealedPerCommitmentSecret")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PaymentBasepoint")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.Property<byte[]>("RevocationBasepoint")
                        .IsRequired()
                        .HasColumnType("varbinary(33)");

                    b.HasKey("ChannelId", "IsLocal");

                    b.ToTable("ChannelKeySets");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.HtlcEntity", b =>
                {
                    b.Property<byte[]>("ChannelId")
                        .HasColumnType("varbinary(32)");

                    b.Property<decimal>("HtlcId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("Direction")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("AddMessageBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("AmountMsat")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("CltvExpiry")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ObscuredCommitmentNumber")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("PaymentHash")
                        .IsRequired()
                        .HasColumnType("varbinary(32)");

                    b.Property<byte[]>("PaymentPreimage")
                        .HasColumnType("varbinary(32)");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.HasKey("ChannelId", "HtlcId", "Direction");

                    b.ToTable("Htlcs");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Node.PeerEntity", b =>
                {
                    b.Property<byte[]>("NodeId")
                        .HasColumnType("varbinary(33)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.HasKey("NodeId");

                    b.ToTable("Peers");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Bitcoin.WatchedTransactionEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", null)
                        .WithMany("WatchedTransactions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelConfigEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", null)
                        .WithOne("Config")
                        .HasForeignKey("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelConfigEntity", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.Node.PeerEntity", null)
                        .WithMany("Channels")
                        .HasForeignKey("PeerEntityNodeId");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelKeySetEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", null)
                        .WithMany("KeySets")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.HtlcEntity", b =>
                {
                    b.HasOne("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", null)
                        .WithMany("Htlcs")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Channel.ChannelEntity", b =>
                {
                    b.Navigation("Config");

                    b.Navigation("Htlcs");

                    b.Navigation("KeySets");

                    b.Navigation("WatchedTransactions");
                });

            modelBuilder.Entity("NLightning.Infrastructure.Persistence.Entities.Node.PeerEntity", b =>
                {
                    b.Navigation("Channels");
                });
#pragma warning restore 612, 618
        }
    }
}
